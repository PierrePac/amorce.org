<?php

namespace ContainerRNxxfFu;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class get_ServiceLocator_Kkmhh0RService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private '.service_locator.kkmhh0R' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->privates['.service_locator.kkmhh0R'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'authenticator' => ['privates', 'App\\Security\\ClientAuthenticator', 'getClientAuthenticatorService', true],
            'entityManager' => ['services', 'doctrine.orm.default_entity_manager', 'getDoctrine_Orm_DefaultEntityManagerService', false],
            'repoClient' => ['privates', 'App\\Repository\\ClientRepository', 'getClientRepositoryService', true],
            'repoCoef' => ['privates', 'App\\Repository\\CoefficientRepository', 'getCoefficientRepositoryService', true],
            'repoCommercial' => ['privates', 'App\\Repository\\CommercialRepository', 'getCommercialRepositoryService', true],
            'userAuthenticator' => ['privates', 'security.user_authenticator', 'getSecurity_UserAuthenticatorService', true],
            'userPasswordHasher' => ['privates', 'security.user_password_hasher', 'getSecurity_UserPasswordHasherService', true],
        ], [
            'authenticator' => 'App\\Security\\ClientAuthenticator',
            'entityManager' => '?',
            'repoClient' => 'App\\Repository\\ClientRepository',
            'repoCoef' => 'App\\Repository\\CoefficientRepository',
            'repoCommercial' => 'App\\Repository\\CommercialRepository',
            'userAuthenticator' => '?',
            'userPasswordHasher' => '?',
        ]);
    }
}
